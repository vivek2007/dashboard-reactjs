{"ast":null,"code":"import { all, takeEvery, put } from 'redux-saga/effects';\nimport store from 'store';\nimport qs from 'qs';\nimport { history, store as reduxStore } from 'index';\nimport actions from './actions';\nexport function* CHANGE_SETTING({\n  payload: {\n    setting,\n    value\n  }\n}) {\n  yield store.set(`app.settings.${setting}`, value);\n  yield put({\n    type: 'settings/SET_STATE',\n    payload: {\n      [setting]: value\n    }\n  });\n}\nexport function* SET_PRIMARY_COLOR({\n  payload: {\n    color\n  }\n}) {\n  const addStyles = () => {\n    const styleElement = document.querySelector('#primaryColor');\n\n    if (styleElement) {\n      styleElement.remove();\n    }\n\n    const body = document.querySelector('body');\n    const styleEl = document.createElement('style');\n    const css = document.createTextNode(`:root { --kit-color-primary: ${color};}`);\n    styleEl.setAttribute('id', 'primaryColor');\n    styleEl.appendChild(css);\n    body.appendChild(styleEl);\n  };\n\n  yield addStyles();\n  yield reduxStore.dispatch({\n    type: 'settings/CHANGE_SETTING',\n    payload: {\n      setting: 'primaryColor',\n      value: color\n    }\n  });\n}\nexport function* SET_THEME({\n  payload: {\n    theme\n  }\n}) {\n  const nextTheme = theme === 'dark' ? 'dark' : 'default';\n  yield document.querySelector('html').setAttribute('data-kit-theme', nextTheme);\n  yield reduxStore.dispatch({\n    type: 'settings/CHANGE_SETTING',\n    payload: {\n      setting: 'theme',\n      value: nextTheme\n    }\n  });\n}\nexport function* SETUP() {\n  // load settings from url on app load\n  const changeSettings = search => {\n    const query = qs.parse(search, {\n      ignoreQueryPrefix: true\n    });\n    Object.keys(query).forEach(key => {\n      let value;\n\n      switch (query[key]) {\n        case 'false':\n          value = false;\n          break;\n\n        case 'true':\n          value = true;\n          break;\n\n        default:\n          value = query[key];\n          break;\n      }\n\n      if (key === 'theme') {\n        reduxStore.dispatch({\n          type: 'settings/SET_THEME',\n          payload: {\n            theme: value\n          }\n        });\n        return;\n      }\n\n      reduxStore.dispatch({\n        type: 'settings/CHANGE_SETTING',\n        payload: {\n          setting: key,\n          value\n        }\n      });\n    });\n  };\n\n  yield changeSettings(history.location.search);\n  yield history.listen(params => {\n    const {\n      search\n    } = params;\n    changeSettings(search);\n  }); // set primary color on app load\n\n  const primaryColor = () => {\n    const color = store.get('app.settings.primaryColor');\n\n    if (color) {\n      reduxStore.dispatch({\n        type: 'settings/SET_PRIMARY_COLOR',\n        payload: {\n          color\n        }\n      });\n    }\n  };\n\n  yield primaryColor(); // init theme on app load\n\n  const initTheme = () => {\n    const {\n      search\n    } = history.location;\n    const query = qs.parse(search, {\n      ignoreQueryPrefix: true\n    });\n    const theme = query.theme || store.get('app.settings.theme') || 'default';\n    reduxStore.dispatch({\n      type: 'settings/SET_THEME',\n      payload: {\n        theme\n      }\n    });\n  };\n\n  yield initTheme(); // detect isMobileView setting on app load and window resize\n\n  const isMobileView = (load = false) => {\n    const currentState = global.window.innerWidth < 768;\n    const prevState = store.get('app.settings.isMobileView');\n\n    if (currentState !== prevState || load) {\n      reduxStore.dispatch({\n        type: 'settings/CHANGE_SETTING',\n        payload: {\n          setting: 'isMobileView',\n          value: currentState\n        }\n      });\n    }\n  }; // detect viewport width on app load and window resize\n\n\n  const isMenuToggled = () => {\n    const shouldToggle = global.window.innerWidth < 1024;\n    const prevState = store.get('app.settings.isMenuCollapsed');\n\n    if (shouldToggle || prevState) {\n      reduxStore.dispatch({\n        type: 'settings/CHANGE_SETTING',\n        payload: {\n          setting: 'isMenuCollapsed',\n          value: true\n        }\n      });\n    }\n  };\n\n  yield isMobileView(true);\n  yield isMenuToggled();\n  yield window.addEventListener('resize', () => {\n    isMobileView();\n    isMenuToggled();\n  });\n}\nexport default function* rootSaga() {\n  yield all([takeEvery(actions.CHANGE_SETTING, CHANGE_SETTING), takeEvery(actions.SET_PRIMARY_COLOR, SET_PRIMARY_COLOR), takeEvery(actions.SET_THEME, SET_THEME), SETUP() // run once on app load to init listeners\n  ]);\n}","map":{"version":3,"sources":["/Users/pradeepkumar/Downloads/clicks-backend-master/src/redux/settings/sagas.js"],"names":["all","takeEvery","put","store","qs","history","reduxStore","actions","CHANGE_SETTING","payload","setting","value","set","type","SET_PRIMARY_COLOR","color","addStyles","styleElement","document","querySelector","remove","body","styleEl","createElement","css","createTextNode","setAttribute","appendChild","dispatch","SET_THEME","theme","nextTheme","SETUP","changeSettings","search","query","parse","ignoreQueryPrefix","Object","keys","forEach","key","location","listen","params","primaryColor","get","initTheme","isMobileView","load","currentState","global","window","innerWidth","prevState","isMenuToggled","shouldToggle","addEventListener","rootSaga"],"mappings":"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","sourcesContent":["import { all, takeEvery, put } from 'redux-saga/effects'\nimport store from 'store'\nimport qs from 'qs'\nimport { history, store as reduxStore } from 'index'\nimport actions from './actions'\n\nexport function* CHANGE_SETTING({ payload: { setting, value } }) {\n  yield store.set(`app.settings.${setting}`, value)\n  yield put({\n    type: 'settings/SET_STATE',\n    payload: {\n      [setting]: value,\n    },\n  })\n}\n\nexport function* SET_PRIMARY_COLOR({ payload: { color } }) {\n  const addStyles = () => {\n    const styleElement = document.querySelector('#primaryColor')\n    if (styleElement) {\n      styleElement.remove()\n    }\n    const body = document.querySelector('body')\n    const styleEl = document.createElement('style')\n    const css = document.createTextNode(`:root { --kit-color-primary: ${color};}`)\n    styleEl.setAttribute('id', 'primaryColor')\n    styleEl.appendChild(css)\n    body.appendChild(styleEl)\n  }\n\n  yield addStyles()\n  yield reduxStore.dispatch({\n    type: 'settings/CHANGE_SETTING',\n    payload: {\n      setting: 'primaryColor',\n      value: color,\n    },\n  })\n}\n\nexport function* SET_THEME({ payload: { theme } }) {\n  const nextTheme = theme === 'dark' ? 'dark' : 'default'\n  yield document.querySelector('html').setAttribute('data-kit-theme', nextTheme)\n  yield reduxStore.dispatch({\n    type: 'settings/CHANGE_SETTING',\n    payload: {\n      setting: 'theme',\n      value: nextTheme,\n    },\n  })\n}\n\nexport function* SETUP() {\n  // load settings from url on app load\n  const changeSettings = search => {\n    const query = qs.parse(search, { ignoreQueryPrefix: true })\n    Object.keys(query).forEach(key => {\n      let value\n      switch (query[key]) {\n        case 'false':\n          value = false\n          break\n        case 'true':\n          value = true\n          break\n        default:\n          value = query[key]\n          break\n      }\n      if (key === 'theme') {\n        reduxStore.dispatch({\n          type: 'settings/SET_THEME',\n          payload: {\n            theme: value,\n          },\n        })\n        return\n      }\n      reduxStore.dispatch({\n        type: 'settings/CHANGE_SETTING',\n        payload: {\n          setting: key,\n          value,\n        },\n      })\n    })\n  }\n  yield changeSettings(history.location.search)\n  yield history.listen(params => {\n    const { search } = params\n    changeSettings(search)\n  })\n\n  // set primary color on app load\n  const primaryColor = () => {\n    const color = store.get('app.settings.primaryColor')\n    if (color) {\n      reduxStore.dispatch({\n        type: 'settings/SET_PRIMARY_COLOR',\n        payload: {\n          color,\n        },\n      })\n    }\n  }\n  yield primaryColor()\n\n  // init theme on app load\n  const initTheme = () => {\n    const { search } = history.location\n    const query = qs.parse(search, { ignoreQueryPrefix: true })\n    const theme = query.theme || store.get('app.settings.theme') || 'default'\n    reduxStore.dispatch({\n      type: 'settings/SET_THEME',\n      payload: {\n        theme,\n      },\n    })\n  }\n  yield initTheme()\n\n  // detect isMobileView setting on app load and window resize\n  const isMobileView = (load = false) => {\n    const currentState = global.window.innerWidth < 768\n    const prevState = store.get('app.settings.isMobileView')\n    if (currentState !== prevState || load) {\n      reduxStore.dispatch({\n        type: 'settings/CHANGE_SETTING',\n        payload: {\n          setting: 'isMobileView',\n          value: currentState,\n        },\n      })\n    }\n  }\n\n  // detect viewport width on app load and window resize\n  const isMenuToggled = () => {\n    const shouldToggle = global.window.innerWidth < 1024\n    const prevState = store.get('app.settings.isMenuCollapsed')\n    if (shouldToggle || prevState) {\n      reduxStore.dispatch({\n        type: 'settings/CHANGE_SETTING',\n        payload: {\n          setting: 'isMenuCollapsed',\n          value: true,\n        },\n      })\n    }\n  }\n\n  yield isMobileView(true)\n  yield isMenuToggled()\n  yield window.addEventListener('resize', () => {\n    isMobileView()\n    isMenuToggled()\n  })\n}\n\nexport default function* rootSaga() {\n  yield all([\n    takeEvery(actions.CHANGE_SETTING, CHANGE_SETTING),\n    takeEvery(actions.SET_PRIMARY_COLOR, SET_PRIMARY_COLOR),\n    takeEvery(actions.SET_THEME, SET_THEME),\n    SETUP(), // run once on app load to init listeners\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}