{"ast":null,"code":"import { invariant } from './invariant';\nimport { SANCTIONED_UNITS } from './units';\nexport function hasOwnProperty(o, key) {\n  return Object.prototype.hasOwnProperty.call(o, key);\n}\n/**\n * https://tc39.es/ecma262/#sec-toobject\n * @param arg\n */\n\nexport function toObject(arg) {\n  if (arg == null) {\n    throw new TypeError('undefined/null cannot be converted to object');\n  }\n\n  return Object(arg);\n}\n/**\n * https://tc39.es/ecma262/#sec-tostring\n */\n\nexport function toString(o) {\n  // Only symbol is irregular...\n  if (typeof o === 'symbol') {\n    throw TypeError('Cannot convert a Symbol value to a string');\n  }\n\n  return String(o);\n}\n/**\n * https://tc39.es/ecma402/#sec-getoption\n * @param opts\n * @param prop\n * @param type\n * @param values\n * @param fallback\n */\n\nexport function getOption(opts, prop, type, values, fallback) {\n  // const descriptor = Object.getOwnPropertyDescriptor(opts, prop);\n  var value = opts[prop];\n\n  if (value !== undefined) {\n    if (type !== 'boolean' && type !== 'string') {\n      throw new TypeError('invalid type');\n    }\n\n    if (type === 'boolean') {\n      value = Boolean(value);\n    }\n\n    if (type === 'string') {\n      value = toString(value);\n    }\n\n    if (values !== undefined && !values.filter(function (val) {\n      return val == value;\n    }).length) {\n      throw new RangeError(value + \" is not within \" + values.join(', '));\n    }\n\n    return value;\n  }\n\n  return fallback;\n}\n/**\n * https://tc39.es/ecma402/#sec-defaultnumberoption\n * @param val\n * @param min\n * @param max\n * @param fallback\n */\n\nexport function defaultNumberOption(val, min, max, fallback) {\n  if (val !== undefined) {\n    val = Number(val);\n\n    if (isNaN(val) || val < min || val > max) {\n      throw new RangeError(val + \" is outside of range [\" + min + \", \" + max + \"]\");\n    }\n\n    return Math.floor(val);\n  }\n\n  return fallback;\n}\n/**\n * https://tc39.es/ecma402/#sec-getnumberoption\n * @param options\n * @param property\n * @param min\n * @param max\n * @param fallback\n */\n\nexport function getNumberOption(options, property, minimum, maximum, fallback) {\n  var val = options[property];\n  return defaultNumberOption(val, minimum, maximum, fallback);\n}\nexport function setInternalSlot(map, pl, field, value) {\n  if (!map.get(pl)) {\n    map.set(pl, Object.create(null));\n  }\n\n  var slots = map.get(pl);\n  slots[field] = value;\n}\nexport function setMultiInternalSlots(map, pl, props) {\n  for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\n    var k = _a[_i];\n    setInternalSlot(map, pl, k, props[k]);\n  }\n}\nexport function getInternalSlot(map, pl, field) {\n  return getMultiInternalSlots(map, pl, field)[field];\n}\nexport function getMultiInternalSlots(map, pl) {\n  var fields = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    fields[_i - 2] = arguments[_i];\n  }\n\n  var slots = map.get(pl);\n\n  if (!slots) {\n    throw new TypeError(pl + \" InternalSlot has not been initialized\");\n  }\n\n  return fields.reduce(function (all, f) {\n    all[f] = slots[f];\n    return all;\n  }, Object.create(null));\n}\nexport function isLiteralPart(patternPart) {\n  return patternPart.type === 'literal';\n}\nexport function partitionPattern(pattern) {\n  var result = [];\n  var beginIndex = pattern.indexOf('{');\n  var endIndex = 0;\n  var nextIndex = 0;\n  var length = pattern.length;\n\n  while (beginIndex < pattern.length && beginIndex > -1) {\n    endIndex = pattern.indexOf('}', beginIndex);\n    invariant(endIndex > beginIndex, \"Invalid pattern \" + pattern);\n\n    if (beginIndex > nextIndex) {\n      result.push({\n        type: 'literal',\n        value: pattern.substring(nextIndex, beginIndex)\n      });\n    }\n\n    result.push({\n      type: pattern.substring(beginIndex + 1, endIndex),\n      value: undefined\n    });\n    nextIndex = endIndex + 1;\n    beginIndex = pattern.indexOf('{', nextIndex);\n  }\n\n  if (nextIndex < length) {\n    result.push({\n      type: 'literal',\n      value: pattern.substring(nextIndex, length)\n    });\n  }\n\n  return result;\n}\n/**\n * https://tc39.es/ecma402/#sec-setnfdigitoptions\n */\n\nexport function setNumberFormatDigitOptions(internalSlots, opts, mnfdDefault, mxfdDefault, notation) {\n  var mnid = getNumberOption(opts, 'minimumIntegerDigits', 1, 21, 1);\n  var mnfd = opts.minimumFractionDigits;\n  var mxfd = opts.maximumFractionDigits;\n  var mnsd = opts.minimumSignificantDigits;\n  var mxsd = opts.maximumSignificantDigits;\n  internalSlots.minimumIntegerDigits = mnid;\n\n  if (mnsd !== undefined || mxsd !== undefined) {\n    internalSlots.roundingType = 'significantDigits';\n    mnsd = defaultNumberOption(mnsd, 1, 21, 1);\n    mxsd = defaultNumberOption(mxsd, mnsd, 21, 21);\n    internalSlots.minimumSignificantDigits = mnsd;\n    internalSlots.maximumSignificantDigits = mxsd;\n  } else if (mnfd !== undefined || mxfd !== undefined) {\n    internalSlots.roundingType = 'fractionDigits';\n    mnfd = defaultNumberOption(mnfd, 0, 20, mnfdDefault);\n    var mxfdActualDefault = Math.max(mnfd, mxfdDefault);\n    mxfd = defaultNumberOption(mxfd, mnfd, 20, mxfdActualDefault);\n    internalSlots.minimumFractionDigits = mnfd;\n    internalSlots.maximumFractionDigits = mxfd;\n  } else if (notation === 'compact') {\n    internalSlots.roundingType = 'compactRounding';\n  } else {\n    internalSlots.roundingType = 'fractionDigits';\n    internalSlots.minimumFractionDigits = mnfdDefault;\n    internalSlots.maximumFractionDigits = mxfdDefault;\n  }\n}\nexport function objectIs(x, y) {\n  if (Object.is) {\n    return Object.is(x, y);\n  } // SameValue algorithm\n\n\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return x !== 0 || 1 / x === 1 / y;\n  } // Step 6.a: NaN == NaN\n\n\n  return x !== x && y !== y;\n}\nvar NOT_A_Z_REGEX = /[^A-Z]/;\n/**\n * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping\n * @param str string to convert\n */\n\nfunction toUpperCase(str) {\n  return str.replace(/([a-z])/g, function (_, c) {\n    return c.toUpperCase();\n  });\n}\n/**\n * https://tc39.es/ecma402/#sec-iswellformedcurrencycode\n */\n\n\nexport function isWellFormedCurrencyCode(currency) {\n  currency = toUpperCase(currency);\n\n  if (currency.length !== 3) {\n    return false;\n  }\n\n  if (NOT_A_Z_REGEX.test(currency)) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * https://tc39.es/ecma402/#sec-formatnumberstring\n * TODO: dedup with intl-pluralrules\n */\n\nexport function formatNumericToString(internalSlots, x) {\n  var isNegative = x < 0 || objectIs(x, -0);\n\n  if (isNegative) {\n    x = -x;\n  }\n\n  var result;\n  var rourndingType = internalSlots.roundingType;\n\n  switch (rourndingType) {\n    case 'significantDigits':\n      result = toRawPrecision(x, internalSlots.minimumSignificantDigits, internalSlots.maximumSignificantDigits);\n      break;\n\n    case 'fractionDigits':\n      result = toRawFixed(x, internalSlots.minimumFractionDigits, internalSlots.maximumFractionDigits);\n      break;\n\n    default:\n      result = toRawPrecision(x, 1, 2);\n\n      if (result.integerDigitsCount > 1) {\n        result = toRawFixed(x, 0, 0);\n      }\n\n      break;\n  }\n\n  x = result.roundedNumber;\n  var string = result.formattedString;\n  var int = result.integerDigitsCount;\n  var minInteger = internalSlots.minimumIntegerDigits;\n\n  if (int < minInteger) {\n    var forwardZeros = repeat('0', minInteger - int);\n    string = forwardZeros + string;\n  }\n\n  if (isNegative) {\n    x = -x;\n  }\n\n  return {\n    roundedNumber: x,\n    formattedString: string\n  };\n}\n/**\n * TODO: dedup with intl-pluralrules and support BigInt\n * https://tc39.es/ecma402/#sec-torawfixed\n * @param x a finite non-negative Number or BigInt\n * @param minFraction and integer between 0 and 20\n * @param maxFraction and integer between 0 and 20\n */\n\nexport function toRawFixed(x, minFraction, maxFraction) {\n  var f = maxFraction;\n  var n = Math.round(x * Math.pow(10, f));\n  var xFinal = n / Math.pow(10, f); // n is a positive integer, but it is possible to be greater than 1e21.\n  // In such case we will go the slow path.\n  // See also: https://tc39.es/ecma262/#sec-numeric-types-number-tostring\n\n  var m;\n\n  if (n < 1e21) {\n    m = n.toString();\n  } else {\n    m = n.toString();\n\n    var _a = m.split('e'),\n        mantissa = _a[0],\n        exponent = _a[1];\n\n    m = mantissa.replace('.', '');\n    m = m + repeat('0', Math.max(+exponent - m.length + 1, 0));\n  }\n\n  var int;\n\n  if (f !== 0) {\n    var k = m.length;\n\n    if (k <= f) {\n      var z = repeat('0', f + 1 - k);\n      m = z + m;\n      k = f + 1;\n    }\n\n    var a = m.slice(0, k - f);\n    var b = m.slice(k - f);\n    m = a + \".\" + b;\n    int = a.length;\n  } else {\n    int = m.length;\n  }\n\n  var cut = maxFraction - minFraction;\n\n  while (cut > 0 && m[m.length - 1] === '0') {\n    m = m.slice(0, -1);\n    cut--;\n  }\n\n  if (m[m.length - 1] === '.') {\n    m = m.slice(0, -1);\n  }\n\n  return {\n    formattedString: m,\n    roundedNumber: xFinal,\n    integerDigitsCount: int\n  };\n} // https://tc39.es/ecma402/#sec-torawprecision\n\nexport function toRawPrecision(x, minPrecision, maxPrecision) {\n  var p = maxPrecision;\n  var m;\n  var e;\n  var xFinal;\n\n  if (x === 0) {\n    m = repeat('0', p);\n    e = 0;\n    xFinal = 0;\n  } else {\n    var xToString = x.toString(); // If xToString is formatted as scientific notation, the number is either very small or very\n    // large. If the precision of the formatted string is lower that requested max precision, we\n    // should still infer them from the formatted string, otherwise the formatted result might have\n    // precision loss (e.g. 1e41 will not have 0 in every trailing digits).\n\n    var xToStringExponentIndex = xToString.indexOf('e');\n\n    var _a = xToString.split('e'),\n        xToStringMantissa = _a[0],\n        xToStringExponent = _a[1];\n\n    var xToStringMantissaWithoutDecimalPoint = xToStringMantissa.replace('.', '');\n\n    if (xToStringExponentIndex >= 0 && xToStringMantissaWithoutDecimalPoint.length <= p) {\n      e = +xToStringExponent;\n      m = xToStringMantissaWithoutDecimalPoint + repeat('0', p - xToStringMantissaWithoutDecimalPoint.length);\n      xFinal = x;\n    } else {\n      e = getMagnitude(x);\n      var decimalPlaceOffset = e - p + 1; // n is the integer containing the required precision digits. To derive the formatted string,\n      // we will adjust its decimal place in the logic below.\n\n      var n = Math.round(adjustDecimalPlace(x, decimalPlaceOffset)); // The rounding caused the change of magnitude, so we should increment `e` by 1.\n\n      if (adjustDecimalPlace(n, p - 1) >= 10) {\n        e = e + 1; // Divide n by 10 to swallow one precision.\n\n        n = Math.floor(n / 10);\n      }\n\n      m = n.toString(); // Equivalent of n * 10 ** (e - p + 1)\n\n      xFinal = adjustDecimalPlace(n, p - 1 - e);\n    }\n  }\n\n  var int;\n\n  if (e >= p - 1) {\n    m = m + repeat('0', e - p + 1);\n    int = e + 1;\n  } else if (e >= 0) {\n    m = m.slice(0, e + 1) + \".\" + m.slice(e + 1);\n    int = e + 1;\n  } else {\n    m = \"0.\" + repeat('0', -e - 1) + m;\n    int = 1;\n  }\n\n  if (m.indexOf('.') >= 0 && maxPrecision > minPrecision) {\n    var cut = maxPrecision - minPrecision;\n\n    while (cut > 0 && m[m.length - 1] === '0') {\n      m = m.slice(0, -1);\n      cut--;\n    }\n\n    if (m[m.length - 1] === '.') {\n      m = m.slice(0, -1);\n    }\n  }\n\n  return {\n    formattedString: m,\n    roundedNumber: xFinal,\n    integerDigitsCount: int\n  }; // x / (10 ** magnitude), but try to preserve as much floating point precision as possible.\n\n  function adjustDecimalPlace(x, magnitude) {\n    return magnitude < 0 ? x * Math.pow(10, -magnitude) : x / Math.pow(10, magnitude);\n  }\n}\nexport function repeat(s, times) {\n  if (typeof s.repeat === 'function') {\n    return s.repeat(times);\n  }\n\n  var arr = new Array(times);\n\n  for (var i = 0; i < arr.length; i++) {\n    arr[i] = s;\n  }\n\n  return arr.join('');\n}\n/**\n * Cannot do Math.log(x) / Math.log(10) bc if IEEE floating point issue\n * @param x number\n */\n\nexport function getMagnitude(x) {\n  // Cannot count string length via Number.toString because it may use scientific notation\n  // for very small or very large numbers.\n  return Math.floor(Math.log(x) * Math.LOG10E);\n}\n/**\n * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping\n * @param str string to convert\n */\n\nfunction toLowerCase(str) {\n  return str.replace(/([A-Z])/g, function (_, c) {\n    return c.toLowerCase();\n  });\n}\n\nvar SHORTENED_SACTION_UNITS = SANCTIONED_UNITS.map(function (unit) {\n  return unit.replace(/^(.*?)-/, '');\n});\n/**\n * https://tc39.es/ecma402/#sec-iswellformedunitidentifier\n * @param unit\n */\n\nexport function isWellFormedUnitIdentifier(unit) {\n  unit = toLowerCase(unit);\n\n  if (SHORTENED_SACTION_UNITS.indexOf(unit) > -1) {\n    return true;\n  }\n\n  var units = unit.split('-per-');\n\n  if (units.length !== 2) {\n    return false;\n  }\n\n  if (SHORTENED_SACTION_UNITS.indexOf(units[0]) < 0 || SHORTENED_SACTION_UNITS.indexOf(units[1]) < 0) {\n    return false;\n  }\n\n  return true;\n}\n/*\n  17 ECMAScript Standard Built-in Objects:\n    Every built-in Function object, including constructors, that is not\n    identified as an anonymous function has a name property whose value\n    is a String.\n\n    Unless otherwise specified, the name property of a built-in Function\n    object, if it exists, has the attributes { [[Writable]]: false,\n    [[Enumerable]]: false, [[Configurable]]: true }.\n*/\n\nexport function defineProperty(target, name, _a) {\n  var value = _a.value;\n  Object.defineProperty(target, name, {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: value\n  });\n}","map":{"version":3,"sources":["/Users/pradeepkumar/Downloads/clicks-backend-master/node_modules/@formatjs/intl-utils/lib/src/polyfill-utils.js"],"names":["invariant","SANCTIONED_UNITS","hasOwnProperty","o","key","Object","prototype","call","toObject","arg","TypeError","toString","String","getOption","opts","prop","type","values","fallback","value","undefined","Boolean","filter","val","length","RangeError","join","defaultNumberOption","min","max","Number","isNaN","Math","floor","getNumberOption","options","property","minimum","maximum","setInternalSlot","map","pl","field","get","set","create","slots","setMultiInternalSlots","props","_i","_a","keys","k","getInternalSlot","getMultiInternalSlots","fields","arguments","reduce","all","f","isLiteralPart","patternPart","partitionPattern","pattern","result","beginIndex","indexOf","endIndex","nextIndex","push","substring","setNumberFormatDigitOptions","internalSlots","mnfdDefault","mxfdDefault","notation","mnid","mnfd","minimumFractionDigits","mxfd","maximumFractionDigits","mnsd","minimumSignificantDigits","mxsd","maximumSignificantDigits","minimumIntegerDigits","roundingType","mxfdActualDefault","objectIs","x","y","is","NOT_A_Z_REGEX","toUpperCase","str","replace","_","c","isWellFormedCurrencyCode","currency","test","formatNumericToString","isNegative","rourndingType","toRawPrecision","toRawFixed","integerDigitsCount","roundedNumber","string","formattedString","int","minInteger","forwardZeros","repeat","minFraction","maxFraction","n","round","pow","xFinal","m","split","mantissa","exponent","z","a","slice","b","cut","minPrecision","maxPrecision","p","e","xToString","xToStringExponentIndex","xToStringMantissa","xToStringExponent","xToStringMantissaWithoutDecimalPoint","getMagnitude","decimalPlaceOffset","adjustDecimalPlace","magnitude","s","times","arr","Array","i","log","LOG10E","toLowerCase","SHORTENED_SACTION_UNITS","unit","isWellFormedUnitIdentifier","units","defineProperty","target","name","configurable","enumerable","writable"],"mappings":"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","sourcesContent":["import { invariant } from './invariant';\nimport { SANCTIONED_UNITS } from './units';\nexport function hasOwnProperty(o, key) {\n    return Object.prototype.hasOwnProperty.call(o, key);\n}\n/**\n * https://tc39.es/ecma262/#sec-toobject\n * @param arg\n */\nexport function toObject(arg) {\n    if (arg == null) {\n        throw new TypeError('undefined/null cannot be converted to object');\n    }\n    return Object(arg);\n}\n/**\n * https://tc39.es/ecma262/#sec-tostring\n */\nexport function toString(o) {\n    // Only symbol is irregular...\n    if (typeof o === 'symbol') {\n        throw TypeError('Cannot convert a Symbol value to a string');\n    }\n    return String(o);\n}\n/**\n * https://tc39.es/ecma402/#sec-getoption\n * @param opts\n * @param prop\n * @param type\n * @param values\n * @param fallback\n */\nexport function getOption(opts, prop, type, values, fallback) {\n    // const descriptor = Object.getOwnPropertyDescriptor(opts, prop);\n    var value = opts[prop];\n    if (value !== undefined) {\n        if (type !== 'boolean' && type !== 'string') {\n            throw new TypeError('invalid type');\n        }\n        if (type === 'boolean') {\n            value = Boolean(value);\n        }\n        if (type === 'string') {\n            value = toString(value);\n        }\n        if (values !== undefined && !values.filter(function (val) { return val == value; }).length) {\n            throw new RangeError(value + \" is not within \" + values.join(', '));\n        }\n        return value;\n    }\n    return fallback;\n}\n/**\n * https://tc39.es/ecma402/#sec-defaultnumberoption\n * @param val\n * @param min\n * @param max\n * @param fallback\n */\nexport function defaultNumberOption(val, min, max, fallback) {\n    if (val !== undefined) {\n        val = Number(val);\n        if (isNaN(val) || val < min || val > max) {\n            throw new RangeError(val + \" is outside of range [\" + min + \", \" + max + \"]\");\n        }\n        return Math.floor(val);\n    }\n    return fallback;\n}\n/**\n * https://tc39.es/ecma402/#sec-getnumberoption\n * @param options\n * @param property\n * @param min\n * @param max\n * @param fallback\n */\nexport function getNumberOption(options, property, minimum, maximum, fallback) {\n    var val = options[property];\n    return defaultNumberOption(val, minimum, maximum, fallback);\n}\nexport function setInternalSlot(map, pl, field, value) {\n    if (!map.get(pl)) {\n        map.set(pl, Object.create(null));\n    }\n    var slots = map.get(pl);\n    slots[field] = value;\n}\nexport function setMultiInternalSlots(map, pl, props) {\n    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\n        var k = _a[_i];\n        setInternalSlot(map, pl, k, props[k]);\n    }\n}\nexport function getInternalSlot(map, pl, field) {\n    return getMultiInternalSlots(map, pl, field)[field];\n}\nexport function getMultiInternalSlots(map, pl) {\n    var fields = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        fields[_i - 2] = arguments[_i];\n    }\n    var slots = map.get(pl);\n    if (!slots) {\n        throw new TypeError(pl + \" InternalSlot has not been initialized\");\n    }\n    return fields.reduce(function (all, f) {\n        all[f] = slots[f];\n        return all;\n    }, Object.create(null));\n}\nexport function isLiteralPart(patternPart) {\n    return patternPart.type === 'literal';\n}\nexport function partitionPattern(pattern) {\n    var result = [];\n    var beginIndex = pattern.indexOf('{');\n    var endIndex = 0;\n    var nextIndex = 0;\n    var length = pattern.length;\n    while (beginIndex < pattern.length && beginIndex > -1) {\n        endIndex = pattern.indexOf('}', beginIndex);\n        invariant(endIndex > beginIndex, \"Invalid pattern \" + pattern);\n        if (beginIndex > nextIndex) {\n            result.push({\n                type: 'literal',\n                value: pattern.substring(nextIndex, beginIndex),\n            });\n        }\n        result.push({\n            type: pattern.substring(beginIndex + 1, endIndex),\n            value: undefined,\n        });\n        nextIndex = endIndex + 1;\n        beginIndex = pattern.indexOf('{', nextIndex);\n    }\n    if (nextIndex < length) {\n        result.push({\n            type: 'literal',\n            value: pattern.substring(nextIndex, length),\n        });\n    }\n    return result;\n}\n/**\n * https://tc39.es/ecma402/#sec-setnfdigitoptions\n */\nexport function setNumberFormatDigitOptions(internalSlots, opts, mnfdDefault, mxfdDefault, notation) {\n    var mnid = getNumberOption(opts, 'minimumIntegerDigits', 1, 21, 1);\n    var mnfd = opts.minimumFractionDigits;\n    var mxfd = opts.maximumFractionDigits;\n    var mnsd = opts.minimumSignificantDigits;\n    var mxsd = opts.maximumSignificantDigits;\n    internalSlots.minimumIntegerDigits = mnid;\n    if (mnsd !== undefined || mxsd !== undefined) {\n        internalSlots.roundingType = 'significantDigits';\n        mnsd = defaultNumberOption(mnsd, 1, 21, 1);\n        mxsd = defaultNumberOption(mxsd, mnsd, 21, 21);\n        internalSlots.minimumSignificantDigits = mnsd;\n        internalSlots.maximumSignificantDigits = mxsd;\n    }\n    else if (mnfd !== undefined || mxfd !== undefined) {\n        internalSlots.roundingType = 'fractionDigits';\n        mnfd = defaultNumberOption(mnfd, 0, 20, mnfdDefault);\n        var mxfdActualDefault = Math.max(mnfd, mxfdDefault);\n        mxfd = defaultNumberOption(mxfd, mnfd, 20, mxfdActualDefault);\n        internalSlots.minimumFractionDigits = mnfd;\n        internalSlots.maximumFractionDigits = mxfd;\n    }\n    else if (notation === 'compact') {\n        internalSlots.roundingType = 'compactRounding';\n    }\n    else {\n        internalSlots.roundingType = 'fractionDigits';\n        internalSlots.minimumFractionDigits = mnfdDefault;\n        internalSlots.maximumFractionDigits = mxfdDefault;\n    }\n}\nexport function objectIs(x, y) {\n    if (Object.is) {\n        return Object.is(x, y);\n    }\n    // SameValue algorithm\n    if (x === y) {\n        // Steps 1-5, 7-10\n        // Steps 6.b-6.e: +0 != -0\n        return x !== 0 || 1 / x === 1 / y;\n    }\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y;\n}\nvar NOT_A_Z_REGEX = /[^A-Z]/;\n/**\n * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping\n * @param str string to convert\n */\nfunction toUpperCase(str) {\n    return str.replace(/([a-z])/g, function (_, c) { return c.toUpperCase(); });\n}\n/**\n * https://tc39.es/ecma402/#sec-iswellformedcurrencycode\n */\nexport function isWellFormedCurrencyCode(currency) {\n    currency = toUpperCase(currency);\n    if (currency.length !== 3) {\n        return false;\n    }\n    if (NOT_A_Z_REGEX.test(currency)) {\n        return false;\n    }\n    return true;\n}\n/**\n * https://tc39.es/ecma402/#sec-formatnumberstring\n * TODO: dedup with intl-pluralrules\n */\nexport function formatNumericToString(internalSlots, x) {\n    var isNegative = x < 0 || objectIs(x, -0);\n    if (isNegative) {\n        x = -x;\n    }\n    var result;\n    var rourndingType = internalSlots.roundingType;\n    switch (rourndingType) {\n        case 'significantDigits':\n            result = toRawPrecision(x, internalSlots.minimumSignificantDigits, internalSlots.maximumSignificantDigits);\n            break;\n        case 'fractionDigits':\n            result = toRawFixed(x, internalSlots.minimumFractionDigits, internalSlots.maximumFractionDigits);\n            break;\n        default:\n            result = toRawPrecision(x, 1, 2);\n            if (result.integerDigitsCount > 1) {\n                result = toRawFixed(x, 0, 0);\n            }\n            break;\n    }\n    x = result.roundedNumber;\n    var string = result.formattedString;\n    var int = result.integerDigitsCount;\n    var minInteger = internalSlots.minimumIntegerDigits;\n    if (int < minInteger) {\n        var forwardZeros = repeat('0', minInteger - int);\n        string = forwardZeros + string;\n    }\n    if (isNegative) {\n        x = -x;\n    }\n    return { roundedNumber: x, formattedString: string };\n}\n/**\n * TODO: dedup with intl-pluralrules and support BigInt\n * https://tc39.es/ecma402/#sec-torawfixed\n * @param x a finite non-negative Number or BigInt\n * @param minFraction and integer between 0 and 20\n * @param maxFraction and integer between 0 and 20\n */\nexport function toRawFixed(x, minFraction, maxFraction) {\n    var f = maxFraction;\n    var n = Math.round(x * Math.pow(10, f));\n    var xFinal = n / Math.pow(10, f);\n    // n is a positive integer, but it is possible to be greater than 1e21.\n    // In such case we will go the slow path.\n    // See also: https://tc39.es/ecma262/#sec-numeric-types-number-tostring\n    var m;\n    if (n < 1e21) {\n        m = n.toString();\n    }\n    else {\n        m = n.toString();\n        var _a = m.split('e'), mantissa = _a[0], exponent = _a[1];\n        m = mantissa.replace('.', '');\n        m = m + repeat('0', Math.max(+exponent - m.length + 1, 0));\n    }\n    var int;\n    if (f !== 0) {\n        var k = m.length;\n        if (k <= f) {\n            var z = repeat('0', f + 1 - k);\n            m = z + m;\n            k = f + 1;\n        }\n        var a = m.slice(0, k - f);\n        var b = m.slice(k - f);\n        m = a + \".\" + b;\n        int = a.length;\n    }\n    else {\n        int = m.length;\n    }\n    var cut = maxFraction - minFraction;\n    while (cut > 0 && m[m.length - 1] === '0') {\n        m = m.slice(0, -1);\n        cut--;\n    }\n    if (m[m.length - 1] === '.') {\n        m = m.slice(0, -1);\n    }\n    return { formattedString: m, roundedNumber: xFinal, integerDigitsCount: int };\n}\n// https://tc39.es/ecma402/#sec-torawprecision\nexport function toRawPrecision(x, minPrecision, maxPrecision) {\n    var p = maxPrecision;\n    var m;\n    var e;\n    var xFinal;\n    if (x === 0) {\n        m = repeat('0', p);\n        e = 0;\n        xFinal = 0;\n    }\n    else {\n        var xToString = x.toString();\n        // If xToString is formatted as scientific notation, the number is either very small or very\n        // large. If the precision of the formatted string is lower that requested max precision, we\n        // should still infer them from the formatted string, otherwise the formatted result might have\n        // precision loss (e.g. 1e41 will not have 0 in every trailing digits).\n        var xToStringExponentIndex = xToString.indexOf('e');\n        var _a = xToString.split('e'), xToStringMantissa = _a[0], xToStringExponent = _a[1];\n        var xToStringMantissaWithoutDecimalPoint = xToStringMantissa.replace('.', '');\n        if (xToStringExponentIndex >= 0 &&\n            xToStringMantissaWithoutDecimalPoint.length <= p) {\n            e = +xToStringExponent;\n            m =\n                xToStringMantissaWithoutDecimalPoint +\n                    repeat('0', p - xToStringMantissaWithoutDecimalPoint.length);\n            xFinal = x;\n        }\n        else {\n            e = getMagnitude(x);\n            var decimalPlaceOffset = e - p + 1;\n            // n is the integer containing the required precision digits. To derive the formatted string,\n            // we will adjust its decimal place in the logic below.\n            var n = Math.round(adjustDecimalPlace(x, decimalPlaceOffset));\n            // The rounding caused the change of magnitude, so we should increment `e` by 1.\n            if (adjustDecimalPlace(n, p - 1) >= 10) {\n                e = e + 1;\n                // Divide n by 10 to swallow one precision.\n                n = Math.floor(n / 10);\n            }\n            m = n.toString();\n            // Equivalent of n * 10 ** (e - p + 1)\n            xFinal = adjustDecimalPlace(n, p - 1 - e);\n        }\n    }\n    var int;\n    if (e >= p - 1) {\n        m = m + repeat('0', e - p + 1);\n        int = e + 1;\n    }\n    else if (e >= 0) {\n        m = m.slice(0, e + 1) + \".\" + m.slice(e + 1);\n        int = e + 1;\n    }\n    else {\n        m = \"0.\" + repeat('0', -e - 1) + m;\n        int = 1;\n    }\n    if (m.indexOf('.') >= 0 && maxPrecision > minPrecision) {\n        var cut = maxPrecision - minPrecision;\n        while (cut > 0 && m[m.length - 1] === '0') {\n            m = m.slice(0, -1);\n            cut--;\n        }\n        if (m[m.length - 1] === '.') {\n            m = m.slice(0, -1);\n        }\n    }\n    return { formattedString: m, roundedNumber: xFinal, integerDigitsCount: int };\n    // x / (10 ** magnitude), but try to preserve as much floating point precision as possible.\n    function adjustDecimalPlace(x, magnitude) {\n        return magnitude < 0 ? x * Math.pow(10, -magnitude) : x / Math.pow(10, magnitude);\n    }\n}\nexport function repeat(s, times) {\n    if (typeof s.repeat === 'function') {\n        return s.repeat(times);\n    }\n    var arr = new Array(times);\n    for (var i = 0; i < arr.length; i++) {\n        arr[i] = s;\n    }\n    return arr.join('');\n}\n/**\n * Cannot do Math.log(x) / Math.log(10) bc if IEEE floating point issue\n * @param x number\n */\nexport function getMagnitude(x) {\n    // Cannot count string length via Number.toString because it may use scientific notation\n    // for very small or very large numbers.\n    return Math.floor(Math.log(x) * Math.LOG10E);\n}\n/**\n * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping\n * @param str string to convert\n */\nfunction toLowerCase(str) {\n    return str.replace(/([A-Z])/g, function (_, c) { return c.toLowerCase(); });\n}\nvar SHORTENED_SACTION_UNITS = SANCTIONED_UNITS.map(function (unit) {\n    return unit.replace(/^(.*?)-/, '');\n});\n/**\n * https://tc39.es/ecma402/#sec-iswellformedunitidentifier\n * @param unit\n */\nexport function isWellFormedUnitIdentifier(unit) {\n    unit = toLowerCase(unit);\n    if (SHORTENED_SACTION_UNITS.indexOf(unit) > -1) {\n        return true;\n    }\n    var units = unit.split('-per-');\n    if (units.length !== 2) {\n        return false;\n    }\n    if (SHORTENED_SACTION_UNITS.indexOf(units[0]) < 0 ||\n        SHORTENED_SACTION_UNITS.indexOf(units[1]) < 0) {\n        return false;\n    }\n    return true;\n}\n/*\n  17 ECMAScript Standard Built-in Objects:\n    Every built-in Function object, including constructors, that is not\n    identified as an anonymous function has a name property whose value\n    is a String.\n\n    Unless otherwise specified, the name property of a built-in Function\n    object, if it exists, has the attributes { [[Writable]]: false,\n    [[Enumerable]]: false, [[Configurable]]: true }.\n*/\nexport function defineProperty(target, name, _a) {\n    var value = _a.value;\n    Object.defineProperty(target, name, {\n        configurable: true,\n        enumerable: false,\n        writable: true,\n        value: value,\n    });\n}\n"]},"metadata":{},"sourceType":"module"}